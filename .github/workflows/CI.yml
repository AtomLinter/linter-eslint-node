name: CI
on:
  pull_request:
  push:
    branches: [main]

jobs:
  Test:
    name: ${{ matrix.os }} - Atom ${{ matrix.atom_channel }} - node ${{ matrix.node_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        atom_channel: [stable, beta]
        node_version: ['lts/*']
        include:
          - os: ubuntu-latest
            atom_channel: stable
            node_version: '*'
    steps:
      - uses: actions/checkout@v3
      - uses: UziTech/action-setup-atom@v3
        with:
          version: ${{ matrix.atom_channel }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - uses: volta-cli/action@v1.7.0
      - name: Install multiple Node versions
        if: runner.os != 'Windows'
        run: |
          volta install node@10
          echo "NODE_10=$(volta which node)" >> $GITHUB_ENV
          echo "NODE_10_VERSION=$(node --version)" >> $GITHUB_ENV
          volta install node@latest
          echo "NODE_LATEST=$(volta which node)" >> $GITHUB_ENV
          echo "NODE_LATEST_VERSION=$(node --version)" >> $GITHUB_ENV
          volta install node@16
          echo "NODE_DEFAULT=$(volta which node)" >> $GITHUB_ENV
          echo "NODE_DEFAULT_VERSION=$(node --version)" >> $GITHUB_ENV
      - name: Install multiple Node versions (Windows)
        if: runner.os == 'Windows'
        run: |
          volta install node@10
          echo "NODE_10=$(volta which node)" >> $env:GITHUB_ENV
          echo "NODE_10_VERSION=$(node --version)" >> $env:GITHUB_ENV
          volta install node@latest
          echo "NODE_LATEST=$(volta which node)" >> $env:GITHUB_ENV
          echo "NODE_LATEST_VERSION=$(node --version)" >> $env:GITHUB_ENV
          volta install node@16
          echo "NODE_DEFAULT=$(volta which node)" >> $env:GITHUB_ENV
          echo "NODE_DEFAULT_VERSION=$(node --version)" >> $env:GITHUB_ENV
      - name: Setup dummy ESLint projects
        run: |
          mkdir ~/with-eslint-6 && cd ~/with-eslint-6
          npm init --yes
          npm install eslint@6
          cd ..

          mkdir ~/with-eslint-7 && cd ~/with-eslint-7
          npm init --yes
          npm install eslint@7
          cd ..

          mkdir ~/with-eslint-latest && cd ~/with-eslint-latest
          npm init --yes
          npm install eslint@latest
          cd ..
      - name: Install dependencies
        run: |
          apm install
          apm install linter-eslint
          # ./node_modules/.bin/atom-package-deps .

      - name: Run tests 👩🏾‍💻
        run: npm run test

  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install

      - name: Lint ✨
        run: npm run test.lint

  CommitLint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Commit lint ✨
        uses: wagoid/commitlint-github-action@v4

  Release:
    needs: [Test, CommitLint, Lint]
    if: github.ref == 'refs/heads/main' &&
      github.event.repository.fork == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: UziTech/action-setup-atom@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: NPM install
        run: npm install
      - name: Release 🎉
        uses: cycjimmy/semantic-release-action@v3
        with:
          branches: |
            ['main']
          extends: |
            @semantic-release/apm-config
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ATOM_ACCESS_TOKEN: ${{ secrets.ATOM_ACCESS_TOKEN  }}
